# This example requires Lima v0.8.0 or later

# limactl start flux-lima.yaml
# limactl shell flux-lima
# sudo -s
# cd /opt/learning

images:
- location: "https://cloud-images.ubuntu.com/releases/24.04/release/ubuntu-24.04-server-cloudimg-amd64.img"
  arch: "x86_64"
- location: "https://cloud-images.ubuntu.com/releases/24.04/release/ubuntu-24.04-server-cloudimg-arm64.img"
  arch: "aarch64"

cpus: 4
memory: "10GiB"

mounts:
- location: "~"
  writable: true
- location: "/tmp/lima"
  writable: true

provision:
- mode: user
  script: |
    echo "export PATH=$PATH:/usr/local/go/bin" >> ~/.bashrc
    echo "export LD_LIBRARY_PATH=/usr/lib64:$LD_LIBRARY_PATH" >> ~/.bashrc

- mode: system
  script: |
    apt-get update
    apt-get install -y apt-transport-https ca-certificates curl clang llvm jq apt-utils wget
    apt-get install -y libelf-dev libpcap-dev libbfd-dev binutils-dev build-essential make 
    apt-get install -y linux-tools-common linux-tools-$(uname -r) linux-headers-$(uname -r)
    apt-get install -y bpfcc-tools python3-pip git which python3-bpfcc libbpfcc-dev
    apt-get install -y bison zlib1g-dev libfl-dev systemtap-sdt-dev libcereal-dev
    apt-get install -y llvm-dev llvm-runtime libclang-dev libgtest-dev libgmock-dev
    apt-get install -y asciidoctor asciidoctor libdw-dev pahole
    apt-get install -y libbpf-dev make clang llvm libelf-dev
    #git clone --recurse-submodules https://github.com/lizrice/learning-ebpf /opt/learning
    #cd /opt/learning/libbpf/src
    #make install 
    cd /opt
    git clone --recurse-submodules https://github.com/libbpf/bpftool.git
    cd bpftool/src
    make install
    export CMAKE=3.23.1
    curl -s -L https://github.com/Kitware/CMake/releases/download/v$CMAKE/cmake-$CMAKE-linux-x86_64.sh > cmake.sh
    sh cmake.sh --prefix=/usr/local --skip-license
    apt-get install -y man flex ssh sudo vim luarocks munge lcov ccache lua5.2 mpich
    apt-get install -y valgrind build-essential pkg-config autotools-dev libtool
    apt-get install -y libffi-dev autoconf automake make clang clang-tidy
    apt-get install -y gcc g++ libpam-dev
    apt-get install bpfcc-tools linux-headers-$(uname -r)
    apt-get install -y libsodium-dev libzmq3-dev libczmq-dev libjansson-dev libmunge-dev
    apt-get install -y libncursesw5-dev liblua5.2-dev liblz4-dev libsqlite3-dev uuid-dev
    apt-get install -y libhwloc-dev libmpich-dev libs3-dev libevent-dev libarchive-dev
    apt-get install -y libboost-graph-dev libboost-system-dev libboost-filesystem-dev
    apt-get install -y libboost-regex-dev libyaml-cpp-dev libedit-dev
    apt-get install -y python3-dev python3-pip
    pip install --break-system-packages --upgrade --ignore-installed markupsafe coverage cffi ply six pyyaml jsonschema
    pip install --break-system-packages --upgrade --ignore-installed sphinx sphinx-rtd-theme sphinxcontrib-spelling
    apt-get install -y faketime libfaketime pylint cppcheck aspell aspell-en python3-bpfcc libcurl4-openssl-dev 
    locale-gen en_US.UTF-8
    luarocks install luaposix
    git clone https://github.com/libbpf/libbpf.git /opt/libbpf
    git clone https://github.com/iovisor/bpftrace /opt/bpftrace
    cd /opt/bpftrace/src && make && make install
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PWD
    git config --global --add safe.directory /opt/bpftrace
    git submodule init && git submodule update --recursive
    mkdir ./build && cd ./build
    sudo apt-get install -y libbpfcc libbpfcc-dev linux-headers-$(uname -r)
    cmake -DCMAKE_BUILD_TYPE=Release ..
    make -j8
    make install
    # So we can use libbpfgo
    wget https://go.dev/dl/go1.24.3.linux-amd64.tar.gz
    rm -rf /usr/local/go && tar -C /usr/local -xzf go1.24.3.linux-amd64.tar.gz
    echo "export PATH=$PATH:/usr/local/go/bin" >> ~/.bashrc
    echo "export LD_LIBRARY_PATH=/usr/lib64:$LD_LIBRARY_PATH" >> ~/.bashrc
    ln -s $(which python3) /usr/bin/python
    touch /tmp/finished.txt

probes:
- script: |
    #!/bin/bash
    set -eux -o pipefail
    if ! timeout 600s bash -c "until test -f /tmp/finished.txt; do sleep 10; done"; then
            echo >&2 "build is not finished yet"
            exit 1
    else
       sleep 5
    fi
  hint: |
    build is finished.
